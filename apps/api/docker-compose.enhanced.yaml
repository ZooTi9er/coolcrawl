version: '3.8'

services:
  redis:
    image: redis:latest
    restart: always
    volumes:
      - redis_data:/data
    # Redis 配置优化
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build:
      context: .
      dockerfile: worker.Dockerfile
      # 构建参数，传递代理设置
      args:
        - HTTP_PROXY=${HTTP_PROXY:-}
        - HTTPS_PROXY=${HTTPS_PROXY:-}
        - NO_PROXY=${NO_PROXY:-}
      # 禁用 BuildKit 缓存以避免缓存损坏问题
      cache_from: []
    image: 0001coder/coolcrawl-worker:enhanced
    pull_policy: never
    environment:
      - REDIS_URL=redis://redis:6379
      - USE_DB_AUTHENTICATION=false
      - NODE_ENV=production
      # 网络配置
      - HTTP_PROXY=${HTTP_PROXY:-}
      - HTTPS_PROXY=${HTTPS_PROXY:-}
      - NO_PROXY=${NO_PROXY:-}
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  server:
    build:
      context: .
      dockerfile: server.Dockerfile
      args:
        - HTTP_PROXY=${HTTP_PROXY:-}
        - HTTPS_PROXY=${HTTPS_PROXY:-}
        - NO_PROXY=${NO_PROXY:-}
      cache_from: []
    image: 0001coder/coolcrawl-server:enhanced
    pull_policy: never
    environment:
      - REDIS_URL=redis://redis:6379
      - USE_DB_AUTHENTICATION=false
      - HOST=0.0.0.0
      - NODE_ENV=production
      - HTTP_PROXY=${HTTP_PROXY:-}
      - HTTPS_PROXY=${HTTPS_PROXY:-}
      - NO_PROXY=${NO_PROXY:-}
    ports:
      - "3002:3002"
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/test"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

volumes:
  redis_data:
    driver: local
